---
title: "OverTheWire: Leviathan"
date: 2023-05-27T12:36:33-04:00
featured_image: "/images/leviathan.jpg"
---
OverTheWire's Leviathan wargame is all about reverse engineering of x86 binaries. The description of the game states that it only requires knowledge of linux command line utilities, and little to no programming experience.

Each level goes as such:
1. You ssh into the server as the user whose password you obtained from the previous level.
2. Through whatever means necessary, you get the password to the next level.

There are no hints given for any of the levels, so it is completely up to us to figure out what we are looking for.

Let's get started.
___
## Level 0 - ~/.backup
Logging in using the username as the password, we are met with a welcome screen. The first thing I always do is list all files in the home folder.

We can see something unusual; a hidden folder is present called '.backup'. Within that, a bookmarks file.

Just for kicks, lets try to grep out anything related to a password...

<center>

![](/images/leviathan0-0.png)

</center>

*Well!* That was easy! On to the next one.
___
## Level 1 - ~/check

In this level we have only one thing in our home directory: a setuid binary called check.

SetUID binaries are special executables that, when executed, run with the permissions of the user that owns the file. In this case, the file is owned by leviathan2.

I know from previous wargames that passwords are usually stored in /etc/somewargame_pass/. If we can somehow get this executable to read out the password file for leviathan2, we can get to the next level.

First, let's run the program.

![](/images/leviathan1-0.png)

*Hmm...*

In order to learn more about what this file is doing, let's open it in [Ghidra](https://github.com/NationalSecurityAgency/ghidra).

![](/images/leviathan1-1.png)

Looking at the main function above, we can see that the program does the following:
1. Take input from the user.
2. Strcmp the output against an array of characters stored in "local_28" (a seemingly arbitrary variable name given by ghidra during analysis)
3. If the inputs match, then execute a shell under leviathan2's UID

Perfect. We need that shell to get the password to the next level. Looking at local_28, we see "\0xes" is stored there. Since we are in little-endian, we need to swap these bytes around, giving us "sex\0". Ignoring the null character at the end, the password must then be "sex"...

![](/images/leviathan1-2.png)

And there we have it.
___
## Level 2 - ~/printfile

Again we begin with a setuid binary owned by the next level's user.

![](/images/leviathan2-0.png)

The program prints a file specified by the user at runtime. But strangely, this setuid binary, although owned by leviathan3, can't access leviathan3's password file.

Ahem, Ghidra!

![](/images/leviathan2-1.png)

Ok, we can see that the program checks if a file is accessible to the current UID (leviathan2) before conditionally checking whether to set the uid to leviathan3. 

This explains why we were not able to print the file.

There is something else here that is interesting, however. On line 25, we can see that a buffer, arbitrarily named "auStack_214", is filled with the command which will run on line 29 after the setuid call. The formatted string uses the first parameter given by the user at runtime. There is no input validation being done by the program, which is a potential hole we can use to force the program to execute our own commands. This is sometimes called ["command injection"](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html).

*But there is a catch.*

The only way the system call will be made is if the parameter also matches a legitimate accessible file, given the conditional statement(s) at lines 23-24.

How about we name a file after the command we need to run following "/bin/cat"? We can use the special character '&' to run another command directly after cat.

Let's touch the file **'&sh'** and try to use it as an input to printfile. This should give us a shell running under leviathan3.

![](/images/leviathan2-2.png)

There's our password!

*Note: There are probably many other commands you could craft to achieve the same result. This is simply the first one I managed to think up.*


## Level 3 - ~/level3
Let's ls the home folder...

![](/images/leviathan3-0.png)

Ok, so this seems to just be another password obstacle. Following the flow of the main function brings us to this "do_stuff" function. 

![](/images/leviathan3-1.png)

On lines 22-23, the program is taking input from the user, putting it into the buffer "local_110", and then comparing it to the  string starting at the address of "local_11b" to determine if the user is allowed to access the shell call made on line 28. So our question is, what is stored at local_11b?

On lines 17-19 is our answer. These 3 variables are stored alongside each other in memory, and they contain "plns", "tnir", and "\nf". Reversing these to big endian and concatenating them gives us "snlprintf\n". Let's try entering this as the password, omitting the newline character.



![](/images/leviathan3-2.png)

## Level 4 - ~/.trash

There's a binary in the .trash folder. Let's see what it gives us.

![](/images/leviathan4-0.png)

11 bytes of binary. If we convert it to ASCII we get "EKKlTF1Xqs". Looks like a password to me! 

## Level 5 - ~/leviathan5

We are met with a binary in the home folder named after the user. It is another setuid executable. 

![](/images/leviathan5-0.png)

Weirdly, it asks for file.log in /tmp/, and it deletes the file if it exists. Obviously we will have to look under the hood. Here is the main function as analyzed by Ghidra:

![](/images/leviathan5-1.png)

So, we can see that the program first looks for a readable file at path /tmp/file.log. If it doesn't exist, it closes out. Otherwise, it reads the file stream character by character. As long as the character is not an EOF (end-of-file indicator), then it puts said character out to the screen. After that it simply sets the uid back to the calling user (leviathan5 in this case), and unlinks the file it has just read, which the program rightly assumes was created by the calling user. 

Soooo, how can we abuse this?

Well, since we just mentioned "unlink", what is a link anyway?

![](/images/leviathan5-2.png)

So a link can be "acted upon by the user or application in exactly the same manner" as the file it is based upon. In other words, if I enact some command -- say *cat* -- on a link of a file, I will get the same output as if I ran it on the file itself.

You can probably see where this is going.  Symbolic links can be created in linux using the command ln -s, with the first argument being the target file, and the second argument being the desired link path. 

If we create a link to the leviathan_pass/leviathan6 file, we should then be able to essentially have a pointer to the password contents residing in /tmp/file.log. 

![](/images/leviathan5-3.png)

