<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>koolaidxk1d</title>
    <link>https://koolaidxk1d.github.io/</link>
    <description>Recent content on koolaidxk1d</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Jun 2023 19:38:23 -0400</lastBuildDate>
    
        <atom:link href="https://koolaidxk1d.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Infographics</title>
        <link>https://koolaidxk1d.github.io/posts/infographics/</link>
        <pubDate>Wed, 21 Jun 2023 19:38:23 -0400</pubDate>
        
        <guid>https://koolaidxk1d.github.io/posts/infographics/</guid>
        <description>koolaidxk1d https://koolaidxk1d.github.io/posts/infographics/ -&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/infographic0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
- https://koolaidxk1d.github.io/posts/infographics/ - </description>
        </item>
    
    
    
        <item>
        <title>OverTheWire: Natas</title>
        <link>https://koolaidxk1d.github.io/posts/natas/</link>
        <pubDate>Wed, 21 Jun 2023 18:16:32 -0400</pubDate>
        
        <guid>https://koolaidxk1d.github.io/posts/natas/</guid>
        <description>koolaidxk1d https://koolaidxk1d.github.io/posts/natas/ -&lt;p&gt;Back for more password hunting! This time we are doing a more web-oriented wargame. Similarly to leviathan, no hints are given on the webpage. This game provides no SSH access; everything is done in the browser.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m lacking in web-dev knowledge to say the least, so this will be quite challenging.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-0&#34;&gt;Level 0&lt;/h2&gt;
&lt;p&gt;The password is right in your face the moment you look at the html.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas0-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-1&#34;&gt;Level 1&lt;/h2&gt;
&lt;p&gt;Same story as level 0, however the workaround is just using the hotkey to open the inspector.
&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas1-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-2&#34;&gt;Level 2&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas2-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;On this level, i can see a png file in the html. I decided to download it. I figured the password might be in the exif data, or perhaps in the raw bytes of the file itself.&lt;/p&gt;
&lt;p&gt;No dice&amp;hellip;&lt;/p&gt;
&lt;p&gt;Then I thought that maybe I just needed to hash the contents of the file&amp;hellip;.however the previous passwords were 32 char alphanumeric. To my knowledge that doesn&amp;rsquo;t follow the format of any hashing algorithms.&lt;/p&gt;
&lt;p&gt;I wracked my brain for way too long before I realized that the file was in the &lt;strong&gt;files/ subdirectory&lt;/strong&gt;. I felt like a total idiot when I realized.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas2-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Inside users.txt was the password I sought.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-3&#34;&gt;Level 3&lt;/h2&gt;
&lt;p&gt;I was stumped on this one for a while, until I thought harder about the comment in the html.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas3-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Not even Google will find it&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;When Google indexes your website, you can prevent it from crawling certain directories by specifying them in a file called &amp;ldquo;robots.txt&amp;rdquo;. Because of the very concept of this file, it must be publicly available. We can therefore access it by typing it into the url bar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas3-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s navigate there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas3-2.png&#34; alt=&#34;&#34;&gt;
Once again, the pass is inside the txt.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-4&#34;&gt;Level 4&lt;/h2&gt;
&lt;p&gt;This level seems to be picky about the place from where I was linked to the website.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas4-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;There is an HTTP header included in GET requests that specifies the &amp;ldquo;referrer&amp;rdquo;. I believe we will have to spoof this to appear as though we are coming from natas5. I couldn&amp;rsquo;t find a way to do this natively in the inspector, as the referrer header is greyed out and cannot be edited. I decided to use this firefox extension:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/referercontrol/&#34;&gt;https://addons.mozilla.org/en-US/firefox/addon/referercontrol/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once I spoofed the referrer header I was given the password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas4-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-5&#34;&gt;Level 5&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Access disallowed. You are not logged in.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Well&amp;hellip;we are logged in using the password from the last level, but it seems there is another layer of access control on this level.&lt;/p&gt;
&lt;p&gt;My first instinct is to check the cookies.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas5-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I set that to 1 and refreshed. Lo and behold, the password appeared.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-6&#34;&gt;Level 6&lt;/h2&gt;
&lt;p&gt;A text box labeled &amp;ldquo;Input secret: &amp;quot; and a submit button. The source code is available for this level. Let&amp;rsquo;s take a look.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas6-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we look at the beginning of the php section, we can see that a file at &amp;ldquo;includes/secret.inc&amp;rdquo; is included in the file, which is likely where the secret is stored.&lt;/p&gt;
&lt;p&gt;If we type that after the url we can direct the browser to the file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas6-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Copy the secret into the form and it returns the password to the next level.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-7&#34;&gt;Level 7&lt;/h2&gt;
&lt;p&gt;We have two links to different pages on the site. Opening the inspector gives us an interesting hint in the form of an html comment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas7-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It seems to want us to traverse to /etc/natas_webpass/ (where every user&amp;rsquo;s password resides).&lt;/p&gt;
&lt;p&gt;In the url we can see that a url parameter is used called page. It likely refers to the filename of the page we are visiting. It may be possible to use &amp;ldquo;../&amp;rdquo; to go up a directory and get us to the file we want.&lt;/p&gt;
&lt;p&gt;We can briefly test this by entering it once as the value. Now we get a warning shown:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas7-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is actually a good thing, because we can see that it is indeed taking us to different places within the filesystem. Additionally, since this warning is so verbose, we can see where we are. Using this information, we can easily format the url as follows to get to the password:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://natas7.natas.labs.overthewire.org/index.php?page=../../../../etc/natas_webpass/natas8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas7-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-8&#34;&gt;Level 8&lt;/h2&gt;
&lt;p&gt;Once again, a level is asking for a secret input. The source code is provided.&lt;/p&gt;
&lt;p&gt;In the source code, we can see the contents of the secret:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;levels/natas8-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can see the exact formula used to create the encoded secret. Following the nested operations, we should first convert the hex to its binary representation, then reverse it, and finally base64 decode it. We can do all of this very quickly and easily with &lt;a href=&#34;https://gchq.github.io/CyberChef/&#34;&gt;CyberChef&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas8-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Entering the output gets us the password to level 9.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-9&#34;&gt;Level 9&lt;/h2&gt;
&lt;p&gt;A search box allows us to search for a word in an unknown set of data. The site displays the search results under &amp;ldquo;Output:&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/natas9-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
- https://koolaidxk1d.github.io/posts/natas/ - </description>
        </item>
    
    
    
        <item>
        <title>Cool Links</title>
        <link>https://koolaidxk1d.github.io/posts/links/</link>
        <pubDate>Wed, 21 Jun 2023 18:16:22 -0400</pubDate>
        
        <guid>https://koolaidxk1d.github.io/posts/links/</guid>
        <description>koolaidxk1d https://koolaidxk1d.github.io/posts/links/ -&lt;p&gt;&lt;a href=&#34;https://based.cooking/&#34;&gt;https://based.cooking/&lt;/a&gt; - simple recipe website without the web bloat&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://slipfox.xyz&#34;&gt;https://slipfox.xyz&lt;/a&gt; - free uploads, link shortening, and way more&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://teachyourselfcs.com/&#34;&gt;https://teachyourselfcs.com/&lt;/a&gt; - roadmap for self-taught CS education&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://book.hacktricks.xyz/&#34;&gt;https://book.hacktricks.xyz/&lt;/a&gt; - wiki with some useful info&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/index.html&#34;&gt;https://cheatsheetseries.owasp.org/index.html&lt;/a&gt; - OWASP Cheat Sheets&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://evoxt.com/&#34;&gt;https://evoxt.com/&lt;/a&gt; - cheap VPS, good customer support&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://new.reddit.com/r/hacking/wiki/index/&#34;&gt;https://new.reddit.com/r/hacking/wiki/index/&lt;/a&gt; - good resources listed here&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/&#34;&gt;https://gchq.github.io/CyberChef/&lt;/a&gt; - Extremely useful all-in-one hacking web tool&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dogbolt.org&#34;&gt;https://dogbolt.org&lt;/a&gt; - Online decompiler&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://redtiger.labs.overthewire.org/&#34;&gt;http://redtiger.labs.overthewire.org/&lt;/a&gt; - SQL Injection Lab (not listed on OTW) (possibly more unindexed labs can be found thru google)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://justbeamit.com/&#34;&gt;https://justbeamit.com/&lt;/a&gt; - P2P direct file transfer, drag n drop, no sign up&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tumbig.com/&#34;&gt;https://www.tumbig.com/&lt;/a&gt; - gifs and stuff&lt;/p&gt;
- https://koolaidxk1d.github.io/posts/links/ - </description>
        </item>
    
    
    
        <item>
        <title>About Me</title>
        <link>https://koolaidxk1d.github.io/posts/about/</link>
        <pubDate>Wed, 31 May 2023 19:30:02 -0400</pubDate>
        
        <guid>https://koolaidxk1d.github.io/posts/about/</guid>
        <description>koolaidxk1d https://koolaidxk1d.github.io/posts/about/ -&lt;p&gt;Y2K zoomer interested in offensive security. No professional experience &amp;hellip; yet.&lt;/p&gt;
&lt;p&gt;The purpose of my blog is to &lt;a href=&#34;https://www.swyx.io/learn-in-public&#34;&gt;learn in public&lt;/a&gt;. Hopefully by writing these posts I can not only help myself but possibly help others who stumble upon them.&lt;/p&gt;
&lt;h2 id=&#34;thanks&#34;&gt;Thanks&lt;/h2&gt;
&lt;p&gt;This blog is written with &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;, compiled with &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, and hosted with &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Hugo theme in use is &lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-diary/&#34;&gt;Diary&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Music backgrounds taken from &lt;a href=&#34;https://ericaofanderson.tumblr.com&#34;&gt;ericaofanderson on tumblr&lt;/a&gt;.&lt;/p&gt;
- https://koolaidxk1d.github.io/posts/about/ - </description>
        </item>
    
    
    
        <item>
        <title>OverTheWire: Leviathan</title>
        <link>https://koolaidxk1d.github.io/posts/leviathan/</link>
        <pubDate>Sat, 27 May 2023 12:36:33 -0400</pubDate>
        
        <guid>https://koolaidxk1d.github.io/posts/leviathan/</guid>
        <description>koolaidxk1d https://koolaidxk1d.github.io/posts/leviathan/ -&lt;p&gt;OverTheWire&amp;rsquo;s Leviathan wargame is all about reverse engineering of x86 binaries. The description of the game states that it only requires knowledge of linux command line utilities, and little to no programming experience.&lt;/p&gt;
&lt;p&gt;Each level goes as such:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You ssh into the server as the user whose password you obtained from the previous level.&lt;/li&gt;
&lt;li&gt;Through whatever means necessary, you get the password to the next level.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are no hints given for any of the levels, so it is completely up to us to figure out what we are looking for.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get started.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-0---backup&#34;&gt;Level 0 - ~/.backup&lt;/h2&gt;
&lt;p&gt;Logging in using the username as the password, we are met with a welcome screen. The first thing I always do is list all files in the home folder.&lt;/p&gt;
&lt;p&gt;We can see something unusual; a hidden folder is present called &amp;lsquo;.backup&amp;rsquo;. Within that, a bookmarks file.&lt;/p&gt;
&lt;p&gt;Just for kicks, lets try to grep out anything related to a password&amp;hellip;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan0-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;em&gt;Well!&lt;/em&gt; That was easy! On to the next one.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-1---check&#34;&gt;Level 1 - ~/check&lt;/h2&gt;
&lt;p&gt;In this level we have only one thing in our home directory: a setuid binary called check.&lt;/p&gt;
&lt;p&gt;SetUID binaries are special executables that, when executed, run with the permissions of the user that owns the file. In this case, the file is owned by leviathan2.&lt;/p&gt;
&lt;p&gt;I know from previous wargames that passwords are usually stored in /etc/somewargame_pass/. If we can somehow get this executable to read out the password file for leviathan2, we can get to the next level.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s run the program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan1-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hmm&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In order to learn more about what this file is doing, let&amp;rsquo;s open it in &lt;a href=&#34;https://github.com/NationalSecurityAgency/ghidra&#34;&gt;Ghidra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan1-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looking at the main function above, we can see that the program does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take input from the user.&lt;/li&gt;
&lt;li&gt;Strcmp the output against an array of characters stored in &amp;ldquo;local_28&amp;rdquo; (a seemingly arbitrary variable name given by ghidra during analysis)&lt;/li&gt;
&lt;li&gt;If the inputs match, then execute a shell under leviathan2&amp;rsquo;s UID&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Perfect. We need that shell to get the password to the next level. Looking at local_28, we see &amp;ldquo;\0xes&amp;rdquo; is stored there. Since we are in little-endian, we need to swap these bytes around, giving us &amp;ldquo;sex\0&amp;rdquo;. Ignoring the null character at the end, the password must then be &amp;ldquo;sex&amp;rdquo;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan1-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;And there we have it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-2---printfile&#34;&gt;Level 2 - ~/printfile&lt;/h2&gt;
&lt;p&gt;Again we begin with a setuid binary owned by the next level&amp;rsquo;s user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan2-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The program prints a file specified by the user at runtime. But strangely, this setuid binary, although owned by leviathan3, can&amp;rsquo;t access leviathan3&amp;rsquo;s password file.&lt;/p&gt;
&lt;p&gt;Ahem, Ghidra!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan2-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ok, we can see that the program checks if a file is accessible to the current UID (leviathan2) before conditionally checking whether to set the uid to leviathan3.&lt;/p&gt;
&lt;p&gt;This explains why we were not able to print the file.&lt;/p&gt;
&lt;p&gt;There is something else here that is interesting, however. On line 25, we can see that a buffer, arbitrarily named &amp;ldquo;auStack_214&amp;rdquo;, is filled with the command which will run on line 29 after the setuid call. The formatted string uses the first parameter given by the user at runtime. There is no input validation being done by the program, which is a potential hole we can use to force the program to execute our own commands. This is sometimes called &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html&#34;&gt;&amp;ldquo;command injection&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But there is a catch.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The only way the system call will be made is if the parameter also matches a legitimate accessible file, given the conditional statement(s) at lines 23-24.&lt;/p&gt;
&lt;p&gt;How about we name a file after the command we need to run following &amp;ldquo;/bin/cat&amp;rdquo;? We can use the special character &amp;lsquo;&amp;amp;&amp;rsquo; to run another command directly after cat.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s touch the file &lt;strong&gt;&#39;&amp;amp;sh&#39;&lt;/strong&gt; and try to use it as an input to printfile. This should give us a shell running under leviathan3.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan2-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s our password!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: There are probably many other commands you could craft to achieve the same result. This is simply the first one I managed to think up.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-3---level3&#34;&gt;Level 3 - ~/level3&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s ls the home folder&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan3-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ok, so this seems to just be another password obstacle. Following the flow of the main function brings us to this &amp;ldquo;do_stuff&amp;rdquo; function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan3-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;On lines 22-23, the program is taking input from the user, putting it into the buffer &amp;ldquo;local_110&amp;rdquo;, and then comparing it to the  string starting at the address of &amp;ldquo;local_11b&amp;rdquo; to determine if the user is allowed to access the shell call made on line 28. So our question is, what is stored at local_11b?&lt;/p&gt;
&lt;p&gt;On lines 17-19 is our answer. These 3 variables are stored alongside each other in memory, and they contain &amp;ldquo;plns&amp;rdquo;, &amp;ldquo;tnir&amp;rdquo;, and &amp;ldquo;\nf&amp;rdquo;. Reversing these to big endian and concatenating them gives us &amp;ldquo;snlprintf\n&amp;rdquo;. Let&amp;rsquo;s try entering this as the password, omitting the newline character.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan3-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-4---trash&#34;&gt;Level 4 - ~/.trash&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s a binary in the .trash folder. Let&amp;rsquo;s see what it gives us.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan4-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;11 bytes of binary. If we convert it to ASCII we get &amp;ldquo;EKKlTF1Xqs&amp;rdquo;. Looks like a password to me!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-5---leviathan5&#34;&gt;Level 5 - ~/leviathan5&lt;/h2&gt;
&lt;p&gt;We are met with a binary in the home folder named after the user. It is another setuid executable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan5-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Weirdly, it asks for file.log in /tmp/, and it deletes the file if it exists. Obviously we will have to look under the hood. Here is the main function as analyzed by Ghidra:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan5-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, we can see that the program first looks for a readable file at path /tmp/file.log. If it doesn&amp;rsquo;t exist, it closes out. Otherwise, it reads the file stream character by character. As long as the character is not an EOF (end-of-file indicator), then it puts said character out to the screen. After that it simply sets the uid back to the calling user (leviathan5 in this case), and unlinks the file it has just read, which the program rightly assumes was created by the calling user.&lt;/p&gt;
&lt;p&gt;Soooo, how can we abuse this?&lt;/p&gt;
&lt;p&gt;Well, since we just mentioned &amp;ldquo;unlink&amp;rdquo;, what is a link anyway?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan5-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So a link can be &amp;ldquo;acted upon by the user or application in exactly the same manner&amp;rdquo; as the file it is based upon. In other words, if I enact some command &amp;ndash; say &lt;em&gt;cat&lt;/em&gt; &amp;ndash; on a link of a file, I will get the same output as if I ran it on the file itself.&lt;/p&gt;
&lt;p&gt;You can probably see where this is going.  Symbolic links can be created in linux using the command ln -s, with the first argument being the target file, and the second argument being the desired link path.&lt;/p&gt;
&lt;p&gt;If we create a link to the leviathan_pass/leviathan6 file, we should then be able to essentially have a pointer to the password contents residing in /tmp/file.log.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan5-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-6---leviathan6&#34;&gt;Level 6 - ~/leviathan6&lt;/h2&gt;
&lt;p&gt;This one is &lt;em&gt;surprisingly easy.&lt;/em&gt; I&amp;rsquo;ll just let the decompiled C code speak for itself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan6-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;And here is how I obtain the password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan6-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;level-7---the-end&#34;&gt;Level 7 - The end&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://koolaidxk1d.github.io/images/leviathan7-0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I&amp;rsquo;ve learned quite a lot about binaries through playing this game. I&amp;rsquo;m still intrigued and confused by system and function calls. I&amp;rsquo;m excited to begin the next OTW game in the very near future. It felt a bit like cheating using Ghidra&amp;rsquo;s decompiler. I&amp;rsquo;m not sure if I was intended to look at raw assembly or not. Maybe there is no cheating. I guess I will find out later down the road.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for this one :)&lt;/p&gt;
- https://koolaidxk1d.github.io/posts/leviathan/ - </description>
        </item>
    
    
  </channel>
</rss> 